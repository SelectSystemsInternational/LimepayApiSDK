
/* 
 * LimepayApi API
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

using NUnit.Framework;

using RestSharp;

using LimepayApi.Net;
using LimepayApi.Net.Models;

namespace LimepayApi.Test
{
    /// <summary>
    ///  Class for testing AuthorizationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LimepayApiTests
    {

        LimepayApi.Net.LimepayApi client;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // curl "https://panel.sendcloud.sc/api/v2/parcels" --user "YOUR_API_KEY:YOUR_API_SECRET"
            // curl--header "Authorization: AccessToken YOUR_API_KEY" "https://servicepoints.sendcloud.sc/api/v2/service-points/"
            client = new LimepayApi.Net.LimepayApi("e572456474b14da3bc33eec1d5e7a054", "6a342aedae604c2bae3f22a1eafb0b54");
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AuthorizationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AuthorizationApi
            //Assert.IsInstanceOf<client>(instance, "instance is a AuthorizationApi");
        }

        /// <summary>
        /// Test CheckoutsCreate
        /// </summary>
        [Test]
        public async Task LimepayApiTest()
        {
            string houseNumber = string.Empty;
            string houseNumberAddition = string.Empty;

            houseNumberAddition = houseNumber = "Plataanstraat 32 33dds23";
            SplitHouseNumber(ref houseNumber, ref houseNumberAddition);

            houseNumberAddition = houseNumber = "Straat 12";
            SplitHouseNumber(ref houseNumber, ref houseNumberAddition);

            houseNumberAddition = houseNumber = "Straat 12 II";
            SplitHouseNumber(ref houseNumber, ref houseNumberAddition);

            houseNumberAddition = houseNumber = "Dr.J.Straat   12a/15";
            SplitHouseNumber(ref houseNumber, ref houseNumberAddition);

            houseNumberAddition = houseNumber = "234 Test Road, Testville";
            SplitHouseNumber(ref houseNumber, ref houseNumberAddition);

            houseNumberAddition = houseNumber = "Test Road 23 Suburb";
            SplitHouseNumber(ref houseNumber, ref houseNumberAddition);

            houseNumberAddition = houseNumber = "456b Tester Road, Testville";
            SplitHouseNumber(ref houseNumber, ref houseNumberAddition);

            houseNumberAddition = houseNumber = "789 c Tester Road, Testville";
            SplitHouseNumber(ref houseNumber, ref houseNumberAddition);


            //Get a label

            var servicePointClient = new LimepayApi.Net.LimepayApi("b3c51d6c1b084d65a902e0406c691216", "754133979f9b4a9283de3e0c75427f24");
            var shippingClient = new LimepayApi.Net.LimepayApi("b3c51d6c1b084d65a902e0406c691216", "754133979f9b4a9283de3e0c75427f24");

            var carriers = await servicePointClient.ServicePoints.GetCarriers();

            //var servicePoints = await servicePointClient.ServicePoints.GetServicePoints("NL");



            //var label = await shippingClient.Label.Get(99903135);

            ////Get all parcels

            //var parcels = await shippingClient.Parcels.Get();

            ////Get a single parcel
            ////Returns a Parcel object

            var methods = await shippingClient.ShippingMethods.Get();

            //Create a new parcel
            //var newParcel1 = new LimepayApi.Net.Models.CreateParcel
            //{
            //    Name = "John Doe",
            //    CompanyName = "SendCloud",
            //    Address = "Insulindelaan",
            //    PostalCode = "5642CV",
            //    HouseNumber = "115",
            //    City = "Eindhoven",
            //    Country = "NL",
            //    Telephone = "+31612345678",
            //    Email = "sales@selectsystems.com.au",
            //    Weight = 10.000,
            //    OrderNumber = "2"
            //};

            //var response = await shippingClient.Parcels.Create(newParcel1);

            var unstampedLetter = methods.Where(x => x.Name == "DHLForYou Drop Off").FirstOrDefault();

            var shipment = new ShippingMethod
            {
                Id = unstampedLetter.Id
            };


            //Create a new parcel
            var newParcel2 = new LimepayApi.Net.Models.CreateParcel
            {
                Id = 3,
                Name = "John Smith",
                CompanyName = "ACME",
                HouseNumber = "1",
                Address = "Wellingtonstreet 25",
                City = "Wellington",
                PostalCode = "3423 DD",
                Email = "sales@selectsystems.com.au",
                Country = "NL",
                RequestLabel = false,
                ShippingMethod = unstampedLetter.Id,
                OrderNumber = "ORDER2014-52321",
                Weight = 10.000,
                InsuredValue = 2000,
                TotalOrderValueCurrency = "GBP",
                TotalOrderValue = "11.11",
                Shipment = shipment

            };

            var response = await shippingClient.Parcels.Create(newParcel2);

            var parcel = await shippingClient.Parcels.Get(null, null, null, null, null, null);

            int[] parcelIds = new int[1];
            parcelIds[0] = parcel[0].Id;

            var response1 = await shippingClient.Label.BulkCreate(parcelIds);


            var newParcel3 = new LimepayApi.Net.Models.CreateParcel
            {
                Id = parcel[0].Id,
                RequestLabel = true
            };

            var response2 = await shippingClient.Parcels.Update(newParcel3);

            // response = await shippingClient.Parcels.Update(newParcel2);

            //var test = response.TrackingNumber;

            //var senderAddress = await shippingClient.SenderAddresses.Get();

            //var shipmentOrder = await shippingClient.ShippingMethods.Get(senderAddress[0].Id.ToString());

            //var order = shipmentOrder.ToString();

            //var sm = await shippingClient.ShippingMethods.Get(8);

            // decimal price = sm.Price;

        }


        public void SplitHouseNumber(ref string houseNumber, ref string houseNumberAddition)
        {
            string newHouseNumber = string.Empty;

            Regex regex = new Regex(@"^(\b\D+\b)?\s*(\b.*?\d.*?\b)\s*(\b\D+\b)?$"); //^([0-9]+)(?:[^0-9a-zA-Z]+([0-9a-zA-Z ]+)|([a-zA-Z](?:[0-9a-zA-Z ]*)))?$

            Match match = regex.Match(houseNumber);
            if (match.Success)
            {
                if (match.Groups[1].ToString() == string.Empty && match.Groups[3].ToString() == string.Empty)
                {
                    newHouseNumber = match.Groups[2].ToString();
                }
                else if (match.Groups[1].ToString() != string.Empty && match.Groups[3].ToString() != string.Empty)
                {
                    houseNumberAddition = (match.Groups[1] != null) ? match.Groups[1].ToString() : match.Groups[3].ToString();
                    newHouseNumber = match.Groups[2].ToString();
                }
                else
                {
                    houseNumberAddition = (match.Groups[1].ToString() != string.Empty) ? match.Groups[1].ToString() : match.Groups[3].ToString();
                    newHouseNumber = match.Groups[2].ToString();
                }
            }

            if (!string.IsNullOrEmpty(newHouseNumber))
                houseNumber = newHouseNumber.Trim();

            if (!string.IsNullOrEmpty(houseNumberAddition))
                houseNumberAddition = houseNumberAddition.Trim();
        }

    }



}


