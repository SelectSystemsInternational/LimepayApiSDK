/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;

using NUnit.Framework;

using LimepayApi.Net.Models;

namespace LimepayApi.Common
{
    /// <summary>
    ///  Class for testing AuthorizationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LimepayCommon
    {

        /// <summary>
        /// Create a Test Order Request
        /// </summary>
        public CreateOrderRequest CreateRequest(string phone = "+61 0000000000", string orderType = null)
        {
            var phoneNumber = new PhoneNumber("string", true);

            var billingAddress = new OrderAddress("Line1", "Line2", "Country", "City", "9999", "State");
            var billing = new OrderBilling(billingAddress, "Name", "Phone");

            var shippingAddress = new OrderAddress("Line1", "Line2", "Country", "City", "9999", "State");
            var shipping = new OrderShipping(1, shippingAddress, "Carrier", "Name", "Phone", "TrackingNumber");

            var item1 = new OrderItem(123, "AUD", "Decription1", "SKU1", 1, "https://yourdomain.com.au/images/image1.jpeg");
            var item2 = new OrderItem(123, "AUD", "Decription1", "SKU1", 1, "https://yourdomain.com.au/images/image2.jpeg");

            var items = new List<OrderItem>();
            items.Add(item1);
            items.Add(item2);

            string phoneNo = phone;
            var amount = new Money(1500, "AUD");

            var discount = new Discount(0);

            var metadata = new Metadata("version", "v4.4");

            var createOrderRequest = new CreateOrderRequest("Order123", amount, "youremail@domain.com", phoneNo, "Order Description",
                items, discount, shipping, billing, metadata, orderType);

            return createOrderRequest;
        }

        /// <summary>
        /// Create a Test Order Payment Request
        /// </summary>
        public OrderPayment CreateOrderPaymentRequest(string paymentToken)
        {
            var cardStatement = new CardStatement("JohnDoe", "City");

            var orderPayment = new OrderPayment(paymentToken, false, "https://yourdomain.com.au/",
                false, false, cardStatement, null);

            // Used for 3DS Testing
            // var paymentActionRequired = new PaymentActionRequired("11111", "https://yourdomain.com.au/");

            //var orderPayment = new OrderPayment(paymentToken, true, "https://yourdomain.com.au/", 
            //    true, true, cardStatement, null);

            return orderPayment;
        }

        /// <summary>
        /// Create a Test Order Payment Request
        /// </summary>
        public OrderPayment Create3DSOrderPaymentRequest(string paymentToken)
        {
            var cardStatement = new CardStatement("JohnDoe", "City");

            var orderPayment = new OrderPayment(paymentToken, true, "https://yourdomain.com.au/", 
                false, false, cardStatement, null);

            return orderPayment;
        }

        /// <summary>
        /// Create a Test Order Authorisation Request
        /// </summary>
        public OrderPayment CreateOrderAutorisationRequest(string paymentToken)
        {
            var cardStatement = new CardStatement("JohnDoe", "City");

            var orderPayment = new OrderPayment(paymentToken, false, "https://yourdomain.com.au/",
                true, false, cardStatement, null);

            return orderPayment;
        }
    }
}


