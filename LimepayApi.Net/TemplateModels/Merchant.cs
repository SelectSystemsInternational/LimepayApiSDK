/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Merchant
    /// </summary>
    [DataContract]
    public partial class Merchant :  IEquatable<Merchant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Merchant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        /// <param name="RedirectConfirmUrl">RedirectConfirmUrl (required).</param>
        /// <param name="RedirectCancelUrl">ExpiresIn (required).</param>
        public Merchant(string RedirectConfirmUrl = default(string), string RedirectCancelUrl = default(string), string StatusCallbackUrl = default(string))
        {
            // to ensure "RedirectConfirmUrl" is required (not null)
            if (RedirectConfirmUrl == null)
            {
                throw new InvalidDataException("RedirectConfirmUrl is a required property for Merchant and cannot be null");
            }
            else
            {
                this.RedirectConfirmUrl = RedirectConfirmUrl;
            }
            // to ensure "RedirectCancelUrl" is required (not null)
            if (RedirectCancelUrl == null)
            {
                throw new InvalidDataException("RedirectCancelUrl is a required property for Merchant and cannot be null");
            }
            else
            {
                this.RedirectCancelUrl = RedirectCancelUrl;
            }

            this.StatusCallbackUrl = StatusCallbackUrl;
        }

        /// <summary>
        /// Gets or Sets redirectConfirmUrl
        /// </summary>
        [DataMember(Name= "redirectConfirmUrl", EmitDefaultValue=false)]
        public string RedirectConfirmUrl { get; set; }
        /// <summary>
        /// Gets or Sets redirectCancelUrl
        /// </summary>
        [DataMember(Name= "redirectCancelUrl", EmitDefaultValue=false)]
        public string RedirectCancelUrl { get; set; }
        /// <summary>
        /// Gets or Sets redirectCancelUrl
        /// </summary>
        [DataMember(Name = "statusCallbackUrl", EmitDefaultValue = false)]
        public string StatusCallbackUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Merchant {\n");
            sb.Append("  RedirectConfirmUrl: ").Append(RedirectConfirmUrl).Append("\n");
            sb.Append("  RedirectCancelUrl: ").Append(RedirectCancelUrl).Append("\n");
            sb.Append("  StatusCallbackUrl: ").Append(StatusCallbackUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Merchant);
        }

        /// <summary>
        /// Returns true if Merchant instances are equal
        /// </summary>
        /// <param name="other">Instance of Merchant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Merchant other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RedirectConfirmUrl == other.RedirectConfirmUrl ||
                    this.RedirectConfirmUrl != null &&
                    this.RedirectConfirmUrl.Equals(other.RedirectConfirmUrl)
                ) && 
                (
                    this.RedirectCancelUrl == other.RedirectCancelUrl ||
                    this.RedirectCancelUrl != null &&
                    this.RedirectCancelUrl.Equals(other.RedirectCancelUrl)
                ) &&
                (
                    this.StatusCallbackUrl == other.StatusCallbackUrl ||
                    this.StatusCallbackUrl != null &&
                    this.StatusCallbackUrl.Equals(other.StatusCallbackUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RedirectConfirmUrl != null)
                    hash = hash * 59 + this.RedirectConfirmUrl.GetHashCode();
                if (this.RedirectCancelUrl != null)
                    hash = hash * 59 + this.RedirectCancelUrl.GetHashCode();
                if (this.StatusCallbackUrl != null)
                    hash = hash * 59 + this.StatusCallbackUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
