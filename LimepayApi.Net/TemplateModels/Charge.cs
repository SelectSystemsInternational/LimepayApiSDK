/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Charge
    /// </summary>
    [DataContract]
    public partial class Charge :  IEquatable<Charge>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Authorised for "authorised"
            /// </summary>
            [EnumMember(Value = "authorised")]
            Authorised,
            
            /// <summary>
            /// Enum Captured for "captured"
            /// </summary>
            [EnumMember(Value = "captured")]
            Captured,
            
            /// <summary>
            /// Enum Cancelled for "cancelled"
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled,
            
            /// <summary>
            /// Enum Refunded for "refunded"
            /// </summary>
            [EnumMember(Value = "refunded")]
            Refunded
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Charge" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Charge() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Charge" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="Reference">Reference.</param>
        /// <param name="Amount">Amount (required).</param>
        /// <param name="Currency">Currency (required).</param>
        /// <param name="State">State (required).</param>
        /// <param name="CapturedAmount">CapturedAmount (required).</param>
        /// <param name="RefundedAmount">The amount of the charge that has been refunded  (required).</param>
        /// <param name="CreatedDate">CreatedDate (required).</param>
        /// <param name="Order">Order.</param>
        /// <param name="Metadata">Metadata.</param>
        /// <param name="ReceiptNumber">ReceiptNumber (required).</param>
        public Charge(string Id = default(string), string Reference = default(string), decimal? Amount = default(decimal?), string Currency = default(string), StateEnum? State = default(StateEnum?), decimal? CapturedAmount = default(decimal?), decimal? RefundedAmount = default(decimal?), DateTime? CreatedDate = default(DateTime?), ChargeOrder Order = default(ChargeOrder), Object Metadata = default(Object), string ReceiptNumber = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Charge and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for Charge and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "Currency" is required (not null)
            if (Currency == null)
            {
                throw new InvalidDataException("Currency is a required property for Charge and cannot be null");
            }
            else
            {
                this.Currency = Currency;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for Charge and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "CapturedAmount" is required (not null)
            if (CapturedAmount == null)
            {
                throw new InvalidDataException("CapturedAmount is a required property for Charge and cannot be null");
            }
            else
            {
                this.CapturedAmount = CapturedAmount;
            }
            // to ensure "RefundedAmount" is required (not null)
            if (RefundedAmount == null)
            {
                throw new InvalidDataException("RefundedAmount is a required property for Charge and cannot be null");
            }
            else
            {
                this.RefundedAmount = RefundedAmount;
            }
            // to ensure "CreatedDate" is required (not null)
            if (CreatedDate == null)
            {
                throw new InvalidDataException("CreatedDate is a required property for Charge and cannot be null");
            }
            else
            {
                this.CreatedDate = CreatedDate;
            }
            // to ensure "ReceiptNumber" is required (not null)
            if (ReceiptNumber == null)
            {
                throw new InvalidDataException("ReceiptNumber is a required property for Charge and cannot be null");
            }
            else
            {
                this.ReceiptNumber = ReceiptNumber;
            }
            this.Reference = Reference;
            this.Order = Order;
            this.Metadata = Metadata;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }
        /// <summary>
        /// Gets or Sets CapturedAmount
        /// </summary>
        [DataMember(Name="captured_amount", EmitDefaultValue=false)]
        public decimal? CapturedAmount { get; set; }
        /// <summary>
        /// The amount of the charge that has been refunded 
        /// </summary>
        /// <value>The amount of the charge that has been refunded </value>
        [DataMember(Name="refunded_amount", EmitDefaultValue=false)]
        public decimal? RefundedAmount { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public ChargeOrder Order { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }
        /// <summary>
        /// Gets or Sets ReceiptNumber
        /// </summary>
        [DataMember(Name="receipt_number", EmitDefaultValue=false)]
        public string ReceiptNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Charge {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CapturedAmount: ").Append(CapturedAmount).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ReceiptNumber: ").Append(ReceiptNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Charge);
        }

        /// <summary>
        /// Returns true if Charge instances are equal
        /// </summary>
        /// <param name="other">Instance of Charge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Charge other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Reference == other.Reference ||
                    this.Reference != null &&
                    this.Reference.Equals(other.Reference)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.CapturedAmount == other.CapturedAmount ||
                    this.CapturedAmount != null &&
                    this.CapturedAmount.Equals(other.CapturedAmount)
                ) && 
                (
                    this.RefundedAmount == other.RefundedAmount ||
                    this.RefundedAmount != null &&
                    this.RefundedAmount.Equals(other.RefundedAmount)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.ReceiptNumber == other.ReceiptNumber ||
                    this.ReceiptNumber != null &&
                    this.ReceiptNumber.Equals(other.ReceiptNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Reference != null)
                    hash = hash * 59 + this.Reference.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.CapturedAmount != null)
                    hash = hash * 59 + this.CapturedAmount.GetHashCode();
                if (this.RefundedAmount != null)
                    hash = hash * 59 + this.RefundedAmount.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.ReceiptNumber != null)
                    hash = hash * 59 + this.ReceiptNumber.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // CapturedAmount (decimal?) minimum
            if(this.CapturedAmount < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for CapturedAmount, must be a value greater than or equal to 0.", new [] { "CapturedAmount" });
            }

            // RefundedAmount (decimal?) minimum
            if(this.RefundedAmount < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for RefundedAmount, must be a value greater than or equal to 0.", new [] { "RefundedAmount" });
            }

            yield break;
        }
    }

}
