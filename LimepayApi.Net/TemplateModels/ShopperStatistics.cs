/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Statistics relating to the shopper
    /// </summary>
    [DataContract]
    public partial class ShopperStatistics :  IEquatable<ShopperStatistics>, IValidatableObject
    {
        /// <summary>
        /// The currency of all all amount values
        /// </summary>
        /// <value>The currency of all all amount values</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum AUD for "AUD"
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUD,
            
            /// <summary>
            /// Enum NZD for "NZD"
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZD
        }

        /// <summary>
        /// Merchant system's fraud check result
        /// </summary>
        /// <value>Merchant system's fraud check result</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FraudCheckResultEnum
        {
            
            /// <summary>
            /// Enum Pass for "pass"
            /// </summary>
            [EnumMember(Value = "pass")]
            Pass,
            
            /// <summary>
            /// Enum Fail for "fail"
            /// </summary>
            [EnumMember(Value = "fail")]
            Fail,
            
            /// <summary>
            /// Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown
        }

        /// <summary>
        /// The currency of all all amount values
        /// </summary>
        /// <value>The currency of all all amount values</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Merchant system's fraud check result
        /// </summary>
        /// <value>Merchant system's fraud check result</value>
        [DataMember(Name="fraud_check_result", EmitDefaultValue=false)]
        public FraudCheckResultEnum? FraudCheckResult { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShopperStatistics" /> class.
        /// </summary>
        /// <param name="AccountCreated">The time at which the shopper&#39;s account was created.</param>
        /// <param name="SalesTotalCount">The total number of separate purchases the shopper has made through the store.</param>
        /// <param name="SalesTotalAmount">The total purchase amount of all orders previously captured through the store..</param>
        /// <param name="SalesAvgAmount">The average value of sales made by the shopper through the store.</param>
        /// <param name="SalesMaxAmount">The maximum purchase amount the shopper has previously purchased from the store..</param>
        /// <param name="RefundsTotalAmount">The total amount of all refunds linked to this shopper&#39;s account.</param>
        /// <param name="PreviousChargeback">Has the shopper had a previous chargeback?.</param>
        /// <param name="Currency">The currency of all all amount values.</param>
        /// <param name="LastLogin">The date at which the shopper last logged in to your store..</param>
        /// <param name="HasPreviousPurchases">Does this customer have previous purchases at your store?.</param>
        /// <param name="FraudCheckResult">Merchant system&#39;s fraud check result.</param>
        public ShopperStatistics(DateTime? AccountCreated = default(DateTime?), int? SalesTotalCount = default(int?), decimal? SalesTotalAmount = default(decimal?), decimal? SalesAvgAmount = default(decimal?), decimal? SalesMaxAmount = default(decimal?), decimal? RefundsTotalAmount = default(decimal?), bool? PreviousChargeback = default(bool?), CurrencyEnum? Currency = default(CurrencyEnum?), DateTime? LastLogin = default(DateTime?), bool? HasPreviousPurchases = default(bool?), FraudCheckResultEnum? FraudCheckResult = default(FraudCheckResultEnum?))
        {
            this.AccountCreated = AccountCreated;
            this.SalesTotalCount = SalesTotalCount;
            this.SalesTotalAmount = SalesTotalAmount;
            this.SalesAvgAmount = SalesAvgAmount;
            this.SalesMaxAmount = SalesMaxAmount;
            this.RefundsTotalAmount = RefundsTotalAmount;
            this.PreviousChargeback = PreviousChargeback;
            this.Currency = Currency;
            this.LastLogin = LastLogin;
            this.HasPreviousPurchases = HasPreviousPurchases;
            this.FraudCheckResult = FraudCheckResult;
        }
        
        /// <summary>
        /// The time at which the shopper&#39;s account was created
        /// </summary>
        /// <value>The time at which the shopper&#39;s account was created</value>
        [DataMember(Name="account_created", EmitDefaultValue=false)]
        public DateTime? AccountCreated { get; set; }
        /// <summary>
        /// The total number of separate purchases the shopper has made through the store
        /// </summary>
        /// <value>The total number of separate purchases the shopper has made through the store</value>
        [DataMember(Name="sales_total_count", EmitDefaultValue=false)]
        public int? SalesTotalCount { get; set; }
        /// <summary>
        /// The total purchase amount of all orders previously captured through the store.
        /// </summary>
        /// <value>The total purchase amount of all orders previously captured through the store.</value>
        [DataMember(Name="sales_total_amount", EmitDefaultValue=false)]
        public decimal? SalesTotalAmount { get; set; }
        /// <summary>
        /// The average value of sales made by the shopper through the store
        /// </summary>
        /// <value>The average value of sales made by the shopper through the store</value>
        [DataMember(Name="sales_avg_amount", EmitDefaultValue=false)]
        public decimal? SalesAvgAmount { get; set; }
        /// <summary>
        /// The maximum purchase amount the shopper has previously purchased from the store.
        /// </summary>
        /// <value>The maximum purchase amount the shopper has previously purchased from the store.</value>
        [DataMember(Name="sales_max_amount", EmitDefaultValue=false)]
        public decimal? SalesMaxAmount { get; set; }
        /// <summary>
        /// The total amount of all refunds linked to this shopper&#39;s account
        /// </summary>
        /// <value>The total amount of all refunds linked to this shopper&#39;s account</value>
        [DataMember(Name="refunds_total_amount", EmitDefaultValue=false)]
        public decimal? RefundsTotalAmount { get; set; }
        /// <summary>
        /// Has the shopper had a previous chargeback?
        /// </summary>
        /// <value>Has the shopper had a previous chargeback?</value>
        [DataMember(Name="previous_chargeback", EmitDefaultValue=false)]
        public bool? PreviousChargeback { get; set; }
        /// <summary>
        /// The date at which the shopper last logged in to your store.
        /// </summary>
        /// <value>The date at which the shopper last logged in to your store.</value>
        [DataMember(Name="last_login", EmitDefaultValue=false)]
        public DateTime? LastLogin { get; set; }
        /// <summary>
        /// Does this customer have previous purchases at your store?
        /// </summary>
        /// <value>Does this customer have previous purchases at your store?</value>
        [DataMember(Name="has_previous_purchases", EmitDefaultValue=false)]
        public bool? HasPreviousPurchases { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShopperStatistics {\n");
            sb.Append("  AccountCreated: ").Append(AccountCreated).Append("\n");
            sb.Append("  SalesTotalCount: ").Append(SalesTotalCount).Append("\n");
            sb.Append("  SalesTotalAmount: ").Append(SalesTotalAmount).Append("\n");
            sb.Append("  SalesAvgAmount: ").Append(SalesAvgAmount).Append("\n");
            sb.Append("  SalesMaxAmount: ").Append(SalesMaxAmount).Append("\n");
            sb.Append("  RefundsTotalAmount: ").Append(RefundsTotalAmount).Append("\n");
            sb.Append("  PreviousChargeback: ").Append(PreviousChargeback).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  HasPreviousPurchases: ").Append(HasPreviousPurchases).Append("\n");
            sb.Append("  FraudCheckResult: ").Append(FraudCheckResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ShopperStatistics);
        }

        /// <summary>
        /// Returns true if ShopperStatistics instances are equal
        /// </summary>
        /// <param name="other">Instance of ShopperStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShopperStatistics other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountCreated == other.AccountCreated ||
                    this.AccountCreated != null &&
                    this.AccountCreated.Equals(other.AccountCreated)
                ) && 
                (
                    this.SalesTotalCount == other.SalesTotalCount ||
                    this.SalesTotalCount != null &&
                    this.SalesTotalCount.Equals(other.SalesTotalCount)
                ) && 
                (
                    this.SalesTotalAmount == other.SalesTotalAmount ||
                    this.SalesTotalAmount != null &&
                    this.SalesTotalAmount.Equals(other.SalesTotalAmount)
                ) && 
                (
                    this.SalesAvgAmount == other.SalesAvgAmount ||
                    this.SalesAvgAmount != null &&
                    this.SalesAvgAmount.Equals(other.SalesAvgAmount)
                ) && 
                (
                    this.SalesMaxAmount == other.SalesMaxAmount ||
                    this.SalesMaxAmount != null &&
                    this.SalesMaxAmount.Equals(other.SalesMaxAmount)
                ) && 
                (
                    this.RefundsTotalAmount == other.RefundsTotalAmount ||
                    this.RefundsTotalAmount != null &&
                    this.RefundsTotalAmount.Equals(other.RefundsTotalAmount)
                ) && 
                (
                    this.PreviousChargeback == other.PreviousChargeback ||
                    this.PreviousChargeback != null &&
                    this.PreviousChargeback.Equals(other.PreviousChargeback)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.LastLogin == other.LastLogin ||
                    this.LastLogin != null &&
                    this.LastLogin.Equals(other.LastLogin)
                ) && 
                (
                    this.HasPreviousPurchases == other.HasPreviousPurchases ||
                    this.HasPreviousPurchases != null &&
                    this.HasPreviousPurchases.Equals(other.HasPreviousPurchases)
                ) && 
                (
                    this.FraudCheckResult == other.FraudCheckResult ||
                    this.FraudCheckResult != null &&
                    this.FraudCheckResult.Equals(other.FraudCheckResult)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountCreated != null)
                    hash = hash * 59 + this.AccountCreated.GetHashCode();
                if (this.SalesTotalCount != null)
                    hash = hash * 59 + this.SalesTotalCount.GetHashCode();
                if (this.SalesTotalAmount != null)
                    hash = hash * 59 + this.SalesTotalAmount.GetHashCode();
                if (this.SalesAvgAmount != null)
                    hash = hash * 59 + this.SalesAvgAmount.GetHashCode();
                if (this.SalesMaxAmount != null)
                    hash = hash * 59 + this.SalesMaxAmount.GetHashCode();
                if (this.RefundsTotalAmount != null)
                    hash = hash * 59 + this.RefundsTotalAmount.GetHashCode();
                if (this.PreviousChargeback != null)
                    hash = hash * 59 + this.PreviousChargeback.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.LastLogin != null)
                    hash = hash * 59 + this.LastLogin.GetHashCode();
                if (this.HasPreviousPurchases != null)
                    hash = hash * 59 + this.HasPreviousPurchases.GetHashCode();
                if (this.FraudCheckResult != null)
                    hash = hash * 59 + this.FraudCheckResult.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
