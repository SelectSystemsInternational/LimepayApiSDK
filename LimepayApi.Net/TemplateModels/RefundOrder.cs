/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Refund
    /// </summary>
    [DataContract]
    public partial class RefundOrder :  IEquatable<RefundOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RefundOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundOrder" /> class.
        /// </summary>
        /// <param name="Id">The id of the refund (required).</param>
        /// <param name="ChargeId">The original charge that relates to this refund.</param>
        /// <param name="Reason">The reason for the refund (required).</param>
        /// <param name="Amount">The amount that was refunded (required).</param>
        /// <param name="Created">The date the refund was created (required).</param>
        /// <param name="Metadata">Any additional metadata.</param>
        public RefundOrder(string Id = default(string), DateTime? RefundedDateTime = default(DateTime?), 
            string MerchantReference = default(string), decimal? Amount = default(decimal?))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Refund and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "RefundDate" is required (not null)
            if (RefundedDateTime == null)
            {
                throw new InvalidDataException("RefundedDateTime is a required property for Refund and cannot be null");
            }
            else
            {
                this.RefundedDateTime = RefundedDateTime;
            }
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for Refund and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "MerchantReference" is required (not null)
            if (MerchantReference == null)
            {
                throw new InvalidDataException("MerchantReference is a required property for Refund and cannot be null");
            }
            else
            {
                this.MerchantReference = MerchantReference;
            }
        }
        
        /// <summary>
        /// The id of the refund
        /// </summary>
        /// <value>The id of the refund</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The date the refund was created
        /// </summary>
        /// <value>The date the refund was created</value>
        [DataMember(Name = "refundedDateTime", EmitDefaultValue = false)]
        public DateTime? RefundedDateTime { get; set; }
        /// <summary>
        /// The MerchantReference for the refund
        /// </summary>
        /// <value>The reason for the refund</value>
        [DataMember(Name = "merchantReference", EmitDefaultValue = false)]
        public string MerchantReference { get; set; }
        /// <summary>
        /// The amount that was refunded
        /// </summary>
        /// <value>The amount that was refunded</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Refund {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RefundedDateTime: ").Append(RefundedDateTime).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RefundOrder);
        }

        /// <summary>
        /// Returns true if Refund instances are equal
        /// </summary>
        /// <param name="other">Instance of Refund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundOrder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.RefundedDateTime == other.RefundedDateTime ||
                    this.RefundedDateTime != null &&
                    this.RefundedDateTime.Equals(other.RefundedDateTime)
                ) && 
                (
                    this.MerchantReference == other.MerchantReference ||
                    this.MerchantReference != null &&
                    this.MerchantReference.Equals(other.MerchantReference)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.RefundedDateTime != null)
                    hash = hash * 59 + this.RefundedDateTime.GetHashCode();
                if (this.MerchantReference != null)
                    hash = hash * 59 + this.MerchantReference.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
