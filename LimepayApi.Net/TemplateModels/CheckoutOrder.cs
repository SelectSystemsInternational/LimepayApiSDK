/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class CheckoutOrder :  IEquatable<CheckoutOrder>, IValidatableObject
    {

        /// <summary>
        /// The type of authority (checkout_id, account_token, store_code)
        /// </summary>
        /// <value>The type of authority (checkout_id, account_token, store_code)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderStatusEnum
        {
            /// <summary>
            /// Enum client_credentials for authorization token request
            /// </summary>
            [EnumMember(Value = "Created")]
            Created,
            /// <summary>
            /// Enum client_credentials for authorization token request
            /// </summary>
            [EnumMember(Value = "Approved")]
            Approved,
            /// <summary>
            /// Enum client_credentials for authorization token request
            /// </summary>
            [EnumMember(Value = "Declined")]
            Declined,
            /// <summary>
            /// Enum client_credentials for authorization token request
            /// </summary>
            [EnumMember(Value = "Abandoned")]
            Abandoned,
            /// <summary>
            /// Enum client_credentials for authorization token request
            /// </summary>
            [EnumMember(Value = "Authorised")]
            Authorised,
            /// <summary>
            /// Enum client_credentials for authorization token request
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired
        }

        /// <summary>
        /// The type of authority (client_credentials)
        /// </summary>
        /// <value>The type of authority (checkout_id, account_token, store_code)</value>
        [DataMember(Name = "orderStatus", EmitDefaultValue = false)]
        public OrderStatusEnum? OrderStatus { get; set; }

        [JsonConstructorAttribute]
        protected CheckoutOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrder" /> class.
        /// </summary>
        /// <param name="Token">Token (required).</param>
        /// <param name="ExpiryDateTime">ExpiryDateTime (required).</param>
        /// <param name="RedirectUrl">RedirectUrl.</param>
        /// <param name="OrderId">OrderId.</param>
        /// <param name="Warnings">Warnings.</param>
        /// <param name="Errors">Errors (required).</param>
        /// <param name="CustomerPairingTokenActive">CustomerPairingTokenActive.</param>
        /// <param name="Metadata">Metadata.</param>
        public CheckoutOrder(string OrderId = default(string), string OrderNumber = default(string), decimal? Amount = default(decimal?),
            OrderConsumer Consumer = default(OrderConsumer), OrderAddress Billing = default(OrderAddress), OrderAddress Shipping = default(OrderAddress), string Description = default(string), 
            List<OrderItem> Items = default(List<OrderItem>), Merchant Merchant = default(Merchant), string MerchantReference = default(string), 
            decimal? TaxAmount = default(decimal?), decimal? ShippingAmount = default(decimal?), string Token = default(string), string[] Promotions = default(string[]),
            decimal? CapturedAmount = default(decimal?), decimal? RefundedAmount = default(decimal?), DateTime? CreatedDateTime = default(DateTime?),
            string RedirectUrl = default(string), Metadata Metadata = default(Metadata))
        {
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("OrderId is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }
            // to ensure "OrderNumber" is required (not null)
            if (OrderNumber == null)
            {
                throw new InvalidDataException("OrderNumber is a required property for Order and cannot be null");
            }
            else
            {
                this.OrderNumber = OrderNumber;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for Order and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "MerchantReference" is required (not null)
            if (MerchantReference == null)
            {
                throw new InvalidDataException("MerchantReference is a required property for Order and cannot be null");
            }
            else
            {
                this.MerchantReference = MerchantReference;
            }
            // to ensure "RedirectUrl" is required (not null)
            if (RedirectUrl == null)
            {
                throw new InvalidDataException("RedirectUrl is a required property for Order and cannot be null");
            }
            else
            {
                this.RedirectUrl = RedirectUrl;
            }
            this.OrderStatus = OrderStatus;
            this.Amount = Amount;
            this.Consumer = Consumer;
            this.Billing = Billing;
            this.Shipping = Shipping;
            this.Items = Items;
            this.Merchant = Merchant;
            this.TaxAmount = TaxAmount;
            this.ShippingAmount = ShippingAmount;
            this.Token = Token;
            this.Promotions = Promotions;
            this.CapturedAmount = CapturedAmount;
            this.RefundedAmount = RefundedAmount;
            this.CreatedDateTime = CreatedDateTime;
            this.RedirectUrl = RedirectUrl;
            this.Metadata = Metadata;

        }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }
        /// <summary>
        /// Gets or Sets Consumer
        /// </summary>
        [DataMember(Name = "consumer", EmitDefaultValue = false)]
        public OrderConsumer Consumer { get; set; }
        /// <summary>
        /// Gets or Sets Billing Address
        /// </summary>
        [DataMember(Name= "billing", EmitDefaultValue=false)]
        public OrderAddress Billing { get; set; }
        /// <summary>
        /// Gets or Sets Shipping Address;
        /// </summary>
        [DataMember(Name = "shipping", EmitDefaultValue = false)]
        public OrderAddress Shipping { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name= "items", EmitDefaultValue=false)]
        public List<OrderItem> Items { get; set; }
        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name= "merchant", EmitDefaultValue=false)]
        public Merchant Merchant { get; set; }
        /// <summary>
        /// Gets or Sets MerchantReference
        /// </summary>
        [DataMember(Name = "merchantReference", EmitDefaultValue = false)]
        public string MerchantReference { get; set; }
        /// <summary>
        /// Gets or Sets Tax Amount
        /// </summary>
        [DataMember(Name = "taxAmount", EmitDefaultValue = false)]
        public decimal? TaxAmount { get; set; }
        /// <summary>
        /// Gets or Sets Shipping Amount
        /// </summary>
        [DataMember(Name = "shippingAmount", EmitDefaultValue = false)]
        public decimal? ShippingAmount { get; set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }
        /// <summary>
        /// Gets or Sets Promotions
        /// </summary>
        [DataMember(Name = "promotions", EmitDefaultValue = false)]
        public string[] Promotions { get; set; }
        /// <summary>
        /// Gets or Sets Captured Amount
        /// </summary>
        [DataMember(Name = "capturedAmount", EmitDefaultValue = false)]
        public decimal? CapturedAmount { get; set; }
        /// <summary>
        /// Gets or Sets Refunded Amount
        /// </summary>
        [DataMember(Name = "refundedAmount", EmitDefaultValue = false)]
        public decimal? RefundedAmount { get; set; }
        /// <summary>
        /// Gets or Sets Created DateTime
        /// </summary>
        [DataMember(Name = "createdDateTime", EmitDefaultValue = false)]
        DateTime? CreatedDateTime { get; set; }/// 
                                              /// </summary>
        [DataMember(Name = "redirectUrl", EmitDefaultValue = false)]
        public string RedirectUrl { get; set; }
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        Metadata Metadata { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Consumer: ").Append(Consumer).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  MerchantReference: ").Append(MerchantReference).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Promotions: ").Append(Promotions).Append("\n");
            sb.Append("  CapturedAmount: ").Append(CapturedAmount).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateOrderRequest);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckoutOrder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) &&
                (
                    this.OrderNumber == other.OrderNumber ||
                    this.OrderNumber != null &&
                    this.OrderNumber.Equals(other.OrderNumber)
                ) &&
                (
                    this.OrderStatus == other.OrderStatus ||
                    this.OrderStatus.Equals(other.OrderStatus)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount.Equals(other.Amount)
                ) &&
                (
                    this.Consumer == other.Consumer ||
                    this.Consumer.Equals(other.Consumer)
                ) && 
                (
                    this.Billing == other.Billing ||
                    this.Billing.Equals(other.Billing)
                ) &&
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping.Equals(other.Shipping)
                ) &&
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) &&
                (
                    this.Items == other.Items ||
                    this.Items.Equals(other.Items)
                ) && 
                (
                    this.Merchant == other.Merchant ||
                    this.Merchant.Equals(other.Merchant)
                ) &&
                (
                    this.MerchantReference == other.MerchantReference ||
                    this.MerchantReference != null &&
                    this.MerchantReference.Equals(other.MerchantReference)
                ) &&               
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount.Equals(other.TaxAmount)
                ) &&
                (
                    this.ShippingAmount == other.ShippingAmount ||
                    this.ShippingAmount.Equals(other.ShippingAmount)
                ) &&
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) &&
                (
                    this.Promotions == other.Promotions ||
                    this.Promotions.Equals(other.Promotions)
                ) &&
                (
                    this.CapturedAmount == other.CapturedAmount ||
                    this.CapturedAmount.Equals(other.CapturedAmount)
                ) &&
                (
                    this.RefundedAmount == other.RefundedAmount ||
                    this.RefundedAmount.Equals(other.RefundedAmount)
                ) &&
                (
                    this.CreatedDateTime == other.CreatedDateTime ||
                    this.CreatedDateTime.Equals(other.CreatedDateTime)
                ) &&
                (
                    this.RedirectUrl == other.RedirectUrl ||
                    this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(other.RedirectUrl)
                ) &&
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata.Equals(other.Metadata)
                );
        }
        

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.OrderNumber != null)
                    hash = hash * 59 + this.OrderNumber.GetHashCode();
                if (this.OrderStatus != null)
                    hash = hash * 59 + this.OrderStatus.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Consumer != null)
                    hash = hash * 59 + this.Consumer.GetHashCode();
                if (this.Billing != null)
                    hash = hash * 59 + this.Billing.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.Merchant != null)
                    hash = hash * 59 + this.Merchant.GetHashCode();
                if (this.MerchantReference != null)
                    hash = hash * 59 + this.MerchantReference.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.ShippingAmount != null)
                    hash = hash * 59 + this.ShippingAmount.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.Promotions != null)
                    hash = hash * 59 + this.Promotions.GetHashCode();
                if (this.CapturedAmount != null)
                    hash = hash * 59 + this.CapturedAmount.GetHashCode();
                if (this.RefundedAmount != null)
                    hash = hash * 59 + this.RefundedAmount.GetHashCode();
                if (this.CreatedDateTime != null)
                    hash = hash * 59 + this.CreatedDateTime.GetHashCode();
                if (this.RedirectUrl != null)
                    hash = hash * 59 + this.RedirectUrl.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();

                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
