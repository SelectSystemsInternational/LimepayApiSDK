/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// CreateRefundRequest
    /// </summary>
    [DataContract]
    public partial class CreateRefundRequest :  IEquatable<CreateRefundRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRefundRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRefundRequest" /> class.
        /// </summary>
        /// <param name="Amount">The amount to refund, can be less than or equal to the previously captured amount (required).</param>
        /// <param name="MerchantRefundReference">Merchant Refund Reference.</param>
        public CreateRefundRequest(decimal? Amount = default(decimal?), string MerchantRefundReference = default(string))
        {
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for CreateRefundRequest and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "MerchantRefundReference" is required (not null)
            if (MerchantRefundReference == null)
            {
                throw new InvalidDataException("MerchantRefundReference is a required property for CreateRefundRequest and cannot be null");
            }
            else
            {
                this.MerchantRefundReference = MerchantRefundReference;
            }
        }

        /// <summary>
        /// The amount to refund, can be less than or equal to the previously captured amount
        /// </summary>
        /// <value>The amount to refund, can be less than or equal to the previously captured amount</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal? Amount { get; set; }
        /// <summary>
        /// The id relating to the original charge that is to be refunded
        /// </summary>
        /// <value>The id relating to the original charge that is to be refunded</value>
        [DataMember(Name= "merchantRefundReference", EmitDefaultValue=false)]
        public string MerchantRefundReference { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRefundRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  MerchantRefundReference: ").Append(MerchantRefundReference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateRefundRequest);
        }

        /// <summary>
        /// Returns true if CreateRefundRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateRefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRefundRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.MerchantRefundReference == other.MerchantRefundReference ||
                    this.MerchantRefundReference != null &&
                    this.MerchantRefundReference.Equals(other.MerchantRefundReference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.MerchantRefundReference != null)
                    hash = hash * 59 + this.MerchantRefundReference.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Amount (decimal?) minimum
            if(this.Amount < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.", new [] { "Amount" });
            }

            yield break;
        }
    }

}
