/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Tracking information
    /// </summary>
    [DataContract]
    public partial class OrderShippingTracking :  IEquatable<OrderShippingTracking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShippingTracking" /> class.
        /// </summary>
        /// <param name="Uri">Uri.</param>
        /// <param name="Number">Number.</param>
        /// <param name="Carrier">Carrier.</param>
        public OrderShippingTracking(string Uri = default(string), string Number = default(string), string Carrier = default(string))
        {
            this.Uri = Uri;
            this.Number = Number;
            this.Carrier = Carrier;
        }
        
        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }
        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }
        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderShippingTracking {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderShippingTracking);
        }

        /// <summary>
        /// Returns true if OrderShippingTracking instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderShippingTracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderShippingTracking other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Carrier == other.Carrier ||
                    this.Carrier != null &&
                    this.Carrier.Equals(other.Carrier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.Carrier != null)
                    hash = hash * 59 + this.Carrier.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Uri (string) maxLength
            if(this.Uri != null && this.Uri.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Uri, length must be less than 500.", new [] { "Uri" });
            }

            // Number (string) maxLength
            if(this.Number != null && this.Number.Length > 120)
            {
                yield return new ValidationResult("Invalid value for Number, length must be less than 120.", new [] { "Number" });
            }

            // Carrier (string) maxLength
            if(this.Carrier != null && this.Carrier.Length > 120)
            {
                yield return new ValidationResult("Invalid value for Carrier, length must be less than 120.", new [] { "Carrier" });
            }

            yield break;
        }
    }

}
