/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System.Collections.Generic;
using System.Threading.Tasks;

using LimepayApi.Net.Helpers;
using LimepayApi.Net.Models;

namespace LimepayApi.Net.Resources
{
    public class LimepayApiOrdersResource : LimepayApiAbstractResource
    {
        public LimepayApiOrdersResource(LimepayApi client) : base(client)
        {

        }

        public async Task<OrderCreateResponse> Create(CreateOrderRequest createOrderRequest)
        {
            return await Create<OrderCreateResponse>("/orders", JsonHelper.Serialize(createOrderRequest));
        }

        public async Task<TransactionResponse> PayOrder(string merchantOrderId, OrderPayment orderPayment)
        {
            return await PayOrder<TransactionResponse>("/orders", merchantOrderId, JsonHelper.Serialize(orderPayment));
        }

        public async Task<PaymentActionResponse> Pay3DSOrder(string merchantOrderId, OrderPayment orderPayment)
        {
            return await PayOrder<PaymentActionResponse>("/orders", merchantOrderId, JsonHelper.Serialize(orderPayment));
        }

        public async Task<TransactionResponse> AuthorizeOrder(string merchantOrderId, OrderPayment orderPayment)
        {
            return await PayOrder<TransactionResponse>("/orders", merchantOrderId, JsonHelper.Serialize(orderPayment));
        }

        public async Task<OrderCreateResponse> Create(CreateOrderInvoiceRequest createOrderInvoiceRequest)
        {
            return await Create<OrderCreateResponse>("/orders/invoices", JsonHelper.Serialize(createOrderInvoiceRequest));
        }

        public async Task<OrderCreateResponse> Get(string merchantOrderId)
        {
            var parameters = new Dictionary<string, string>();

            return await Get<OrderCreateResponse>("/orders", merchantOrderId, parameters);
        }

        public async Task<StatusResponse> Update(string merchantOrderId, UpdateOrder internalOrderId)
        {
            return await Update<StatusResponse>("/orders", merchantOrderId, JsonHelper.Serialize(internalOrderId));
        }

        public async Task<StatusResponse> Cancel(string merchantOrderId)
        {
            return await Delete<StatusResponse>("/orders", merchantOrderId);
        }

    }
}
