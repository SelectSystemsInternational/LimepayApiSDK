/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

using LimepayApi.Net.Exceptions;
using LimepayApi.Net.Helpers;
using LimepayApi.Net.Resources;
using LimepayApi.Net.Models;

namespace LimepayApi.Net
{

    public class LimepayApi
    {
        private readonly string _publishablekey;
        private readonly string _secretKey;
        private readonly string _hostUrl;

        public readonly LimepayApiOrdersResource Orders;
        public readonly LimepayApiPaymentsResource Payments;
        public readonly LimepayApiRefundsResource Refunds;

        public LimepayApi(string hostUrl, string publishablekey, string secretKey)
        {
            if (string.IsNullOrWhiteSpace(publishablekey) || string.IsNullOrWhiteSpace(secretKey))
            {
                throw new LimepayApiException("You must have an API key and an API secret key");
            }

            _publishablekey = publishablekey;
            _secretKey = secretKey;
            _hostUrl = hostUrl;

            Orders = new LimepayApiOrdersResource(this);
            Payments = new LimepayApiPaymentsResource(this);
            Refunds = new LimepayApiRefundsResource(this);

        }

        internal string GetApiKey()
        {
            return _publishablekey;
        }

        internal string GetApiSecret()
        {
            return _secretKey;
        }

        internal string GetHostUrl()
        {
            return _hostUrl;
        }

        internal string GetBasicAuth()
        {
            return $"Basic {Convert.ToBase64String(Encoding.UTF8.GetBytes(_publishablekey + ":" + _secretKey))}";
        }

        internal string GetAccessToken()
        {
            return $"AccessToken {_secretKey}";
        }

        internal async Task<T> Create<T>(string url, string data, string returnObject, string dateTimeFormat)
        {
            return await SendRequest<T>(url, "POST", null, data, returnObject, dateTimeFormat);
        }

        internal async Task<T> Get<T>(string url, Dictionary<string, string> parameters, string returnObject, string dateTimeFormat)
        {
            return await SendRequest<T>(url, "GET", parameters, null, returnObject, dateTimeFormat);
        }

        internal async Task<T> Update<T>(string url, string data, string returnObject, string dateTimeFormat)
        {
            return await SendRequest<T>(url, "PUT", null, data, returnObject, dateTimeFormat);
        }

        internal async Task<T> Update<T>(string url, string data)
        {
            return await SendRequest<T>(url, "PATCH", null, data);
        }

        internal async Task<T> Delete<T>(string url, string returnObject, string dateTimeFormat)
        {
            return await SendRequest<T>(url, "DELETE", null);
        }

        internal Uri GetUrl(string url, Dictionary<string, string> parameters = null)
        {
            if (parameters != null && parameters.Any())
            {
                var queryParameters = string.Join("&",
                    parameters.Select(
                        p =>
                            string.IsNullOrEmpty(p.Value)
                                ? Uri.EscapeDataString(p.Key)
                                : $"{Uri.EscapeDataString(p.Key)}={Uri.EscapeDataString(p.Value)}"));
                if (!string.IsNullOrWhiteSpace(queryParameters))
                {
                    url += "?" + queryParameters;
                }
            }
            return new Uri(url);
        }

        private async Task<T> SendRequest<T>(string url, string method, Dictionary<string, string> parameters = null, string data = null, string returnObject = null, string dateTimeFormat = null)
        {
            var httpClient = new HttpClient();

            var requestUri = GetUrl(url, parameters);
            HttpResponseMessage response = new HttpResponseMessage();
            switch (method.ToUpper())
            {
                case "GET":
                    {
                        httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json;charset=utf-8");
                        httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Limepay-SecretKey", _secretKey);
                        response = await httpClient.GetAsync(requestUri).ConfigureAwait(false);
                    }
                    break;
                case "POST":
                    {
                        var content = new StringContent(data);
                        content.Headers.Clear();
                        content.Headers.Add("Content-Type", "application/json;charset=utf-8");
                        content.Headers.Add("Limepay-SecretKey", _secretKey);
                        response = await httpClient.PostAsync(requestUri, content).ConfigureAwait(false);
                    }
                    break;
                case "PUT":
                    {
                        var content = new StringContent(data);
                        content.Headers.Clear();
                        content.Headers.Add("Content-Type", "application/json;charset=utf-8");
                        content.Headers.Add("Limepay-SecretKey", _secretKey);
                        response = await httpClient.PutAsync(requestUri, content).ConfigureAwait(false);
                    }
                    break;
                case "PATCH":
                    {
                        var content = new StringContent(data);
                        content.Headers.Clear();
                        content.Headers.Add("Content-Type", "application/json;charset=utf-8");
                        content.Headers.Add("Limepay-SecretKey", _secretKey);
                        response = await httpClient.PatchAsync(requestUri, content).ConfigureAwait(false);
                    }
                    break;
                case "DELETE":
                    {
                        httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Limepay-SecretKey", _secretKey);
                        response = await httpClient.DeleteAsync(requestUri).ConfigureAwait(false);
                    }
                    break;
            }

            if (response.IsSuccessStatusCode || response.StatusCode == HttpStatusCode.Forbidden)
            {
                var jsonResult = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                if (!string.IsNullOrWhiteSpace(jsonResult))
                {
                    if (!string.IsNullOrWhiteSpace(returnObject))
                    {
                        Dictionary<string, T> result = JsonHelper.DeserializeAsDictionary<T>(jsonResult, dateTimeFormat);
                        return result[returnObject];
                    }

                    return JsonHelper.Deserialize<T>(jsonResult, dateTimeFormat);
                }
                else
                {
                    var statusResponse = new StatusResponse((int)response.StatusCode, "", "", "", "", "");
                    return (T)Convert.ChangeType(statusResponse, typeof(T));
                }
            }
            else
            {
                await HandleResponseError(response);
            }

            return default(T);
        }

        private async Task HandleResponseError(HttpResponseMessage response)
        {
            string message;

            switch (response.StatusCode)
            {
                case HttpStatusCode.NotFound:
                    message = "Page not found";
                    break;
                default:
                    var responseBody = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    var result = JsonHelper.Deserialize<LimepayApiError>(responseBody, "yyyy-MM-dd HH:mm:ss");

                    message = result.Message;

                    if (!string.IsNullOrEmpty(result.Error?.Message))
                    {
                        message = result.Error.Message;
                    }

                    break;
            }

            throw new LimepayApiException(message);
        }

    }
}
