/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class PaymentResponse :  IEquatable<PaymentResponse>, IValidatableObject
    {

        [JsonConstructorAttribute]
        protected PaymentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentResponse" /> class.
        /// </summary>
        /// <param name="Id">Id</param>
        /// <param name="MerchantId">MerchantId.</param>
        /// <param name="CustomerId">CustomerId</param>
        /// <param name="MerchantOrderId">MerchantOrderId</param>
        /// <param name="TransactionPayType">TransactionPayType</param>
        /// <param name="Amount">Amount</param>
        /// <param name="Currency">Currency</param>
        /// <param name="Status">Status</param>
        /// <param name="StatusBeforeDispute">StatusBeforeDispute</param>
        /// <param name="LastChargeId">MerchantOrderId</param>
        /// <param name="RefundedAmount">RefundedAmount</param>
        /// <param name="PayoutId">PayoutId</param>
        /// <param name="CreatedAt">CreatedAt</param>
        /// <param name="UpdatedAt">UpdatedAt</param>
        /// <param name="Fee">Fee</param>/// 
        public PaymentResponse(string Id = default(string), 
            string MerchantId = default(string),
            string CustomerId = default(string),
            string MerchantOrderId = default(string),
            TransactionPayType TransactionPayType = default(TransactionPayType),
            Int64? Amount = default(Int64?),
            string Currency = default(string),
            string Status = default(string),
            string StatusBeforeDispute = default(string),
            string LastChargeId = default(string),
            Int64? RefundedAmount = default(Int64?),
            string PayoutId = default(string),
            string CreatedAt = default(string),
            string UpdatedAt = default(string),
            Int64? Fee = default(Int64?))
        {

            this.Id = Id;
            this.MerchantId = MerchantId;
            this.CustomerId = CustomerId;
            this.MerchantOrderId = MerchantOrderId;
            this.TransactionPayType = TransactionPayType;
            this.Amount = Amount;
            this.Currency = Currency;
            this.Status = Status;
            this.StatusBeforeDispute = StatusBeforeDispute;
            this.LastChargeId = LastChargeId;
            this.RefundedAmount = RefundedAmount;
            this.PayoutId = PayoutId;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.Fee = Fee;
        }

        /// <summary>
        /// Gets or Sets Id;
        /// </summary>
        [DataMember(Name = "_id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name = "merchantId", EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name= "marketplaceId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantOrderId
        /// </summary>
        [DataMember(Name = "merchantOrderId", EmitDefaultValue = false)]
        public string MerchantOrderId { get; set; }

        /// <summary>
        /// Gets or Sets Shipping Details;
        /// </summary>
        [DataMember(Name = "transactionPayType", EmitDefaultValue = false)]
        public TransactionPayType TransactionPayType { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public Int64? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name= "currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusBeforeDispute
        /// </summary>
        [DataMember(Name= "statusBeforeDispute", EmitDefaultValue=false)]
        public string StatusBeforeDispute { get; set; }

        /// <summary>
        /// Gets or Sets LastChargeId
        /// </summary>
        [DataMember(Name= "lastChargeId", EmitDefaultValue=false)]
        public string LastChargeId { get; set; }

        /// <summary>
        /// Gets or Sets RefundedAmount
        /// </summary>
        [DataMember(Name = "refundedAmount", EmitDefaultValue = false)]
        public Int64? RefundedAmount { get; set; }
       
        /// <summary>
        /// Gets or Sets PayoutId
        /// </summary>
        [DataMember(Name = "payoutId", EmitDefaultValue = false)]
        public string PayoutId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public Int64? Fee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MerchantOrderId: ").Append(MerchantOrderId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  TransactionPayType: ").Append(TransactionPayType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusBeforeDispute: ").Append(StatusBeforeDispute).Append("\n");
            sb.Append("  LastChargeId: ").Append(LastChargeId).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("  PayoutId: ").Append(PayoutId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentResponse);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) &&
                (
                    this.MerchantOrderId == other.MerchantOrderId ||
                    this.MerchantOrderId != null &&
                    this.MerchantOrderId.Equals(other.MerchantOrderId)
                ) &&
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) &&
                (
                    this.TransactionPayType == other.TransactionPayType ||
                    this.TransactionPayType.Equals(other.TransactionPayType)
                ) &&
                (
                    this.CustomerId == other.CustomerId ||
                    this.CustomerId != null &&
                    this.CustomerId.Equals(other.CustomerId)
                ) &&
                (
                    this.Amount == other.Amount ||
                    this.Amount.Equals(other.Amount)
                ) &&
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) &&
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) &&
                (
                    this.StatusBeforeDispute == other.StatusBeforeDispute ||
                    this.StatusBeforeDispute.Equals(other.StatusBeforeDispute)
                ) &&
                (
                    this.LastChargeId == other.LastChargeId ||
                    this.LastChargeId.Equals(other.LastChargeId)
                ) && 
                (
                    this.RefundedAmount == other.RefundedAmount ||
                    this.RefundedAmount != null &&
                    this.RefundedAmount.Equals(other.RefundedAmount)
                ) &&
                (
                    this.PayoutId == other.PayoutId ||
                    this.PayoutId != null &&
                    this.PayoutId.Equals(other.PayoutId)
                ) &&
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) &&
                (
                    this.Fee == other.Fee ||
                    this.Fee.Equals(other.Fee)
                );
        }
        

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.MerchantOrderId != null)
                    hash = hash * 59 + this.MerchantOrderId.GetHashCode();
                if (this.MerchantOrderId != null)
                    hash = hash * 59 + this.MerchantOrderId.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.CustomerId != null)
                    hash = hash * 59 + this.CustomerId.GetHashCode();
                hash = hash * 59 + this.TransactionPayType.GetHashCode();
                hash = hash * 59 + this.Amount.GetHashCode();

                if (this.StatusBeforeDispute != null)
                    hash = hash * 59 + this.Currency.GetHashCode();

                if (this.StatusBeforeDispute != null)
                    hash = hash * 59 + this.StatusBeforeDispute.GetHashCode();

                if (this.StatusBeforeDispute != null)
                    hash = hash * 59 + this.StatusBeforeDispute.GetHashCode();
                hash = hash * 59 + this.LastChargeId.GetHashCode();
                if (this.RefundedAmount != null)
                    hash = hash * 59 + this.RefundedAmount.GetHashCode();

                if (this.PayoutId != null)
                    hash = hash * 59 + this.PayoutId.GetHashCode();

                hash = hash * 59 + this.CreatedAt.GetHashCode();
                hash = hash * 59 + this.UpdatedAt.GetHashCode();
                hash = hash * 59 + this.Fee.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
