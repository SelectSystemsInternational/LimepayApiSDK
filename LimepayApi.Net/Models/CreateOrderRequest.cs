/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class CreateOrderRequest :  IEquatable<CreateOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderRequest" /> class.
        /// </summary>
        /// <param name="InternalOrderId">InternalOrderId (required)</param>
        /// <param name="PaymentAmount">PaymentAmount</param>
        /// <param name="CustomerEmail">CustomerEmail (required)</param>
        /// <param name="PhoneNo">PhoneNo (required)</param>
        /// <param name="Description">Description  (required)</param>
        /// <param name="Items">List of Order Items (required)</param>
        /// <param name="Discount">Discount</param>
        /// <param name="Shipping">Shipping Address</param>
        /// <param name="Billing">Billing Address</param>
        /// <param name="Metadata">Metadata</param>

        /// <param name="Metadata">Metadata.</param>
        public CreateOrderRequest(string InternalOrderId = default(string), 
            Money PaymentAmount = default(Money), 
            string CustomerEmail = default(string),
            string PhoneNo = default(string), 
            string Description = default(string), 
            List<OrderItem> Items = default(List<OrderItem>),
            Discount Discount = default(Discount), 
            OrderShipping Shipping = default(OrderShipping),
            OrderBilling Billing = default(OrderBilling), 
            Metadata Metadata = default(Metadata),
            string OrderType = default(string))
        {
            // to ensure "InternalOrderId" is required (not null)
            if (InternalOrderId == null)
            {
                throw new InvalidDataException("InternalOrderId is a required property for Order and cannot be null");
            }

            // to ensure "CustomerEmail" is required (not null)
            if (CustomerEmail == null)
            {
                throw new InvalidDataException("CustomerEmail is a required property for Order and cannot be null");
            }
            
            // to ensure "PhoneNo" is required (not null)            
            if (PhoneNo == null)
            {
                throw new InvalidDataException("PhoneNo is a required property for Order and cannot be null");
            }
            
            // to ensure "Description" is required (not null)            
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for Order and cannot be null");
            }

            this.InternalOrderId = InternalOrderId;
            this.PaymentAmount = PaymentAmount;
            this.CustomerEmail = CustomerEmail;
            this.PhoneNo = PhoneNo;
            this.Description = Description;
            this.Items = Items;
            this.Discount = Discount;
            this.Billing = Billing;
            this.Shipping = Shipping;
            this.Metadata = Metadata;

            this.OrderType = OrderType;
        }

        /// <summary>
        /// Gets or Sets InternalOrderId
        /// </summary>
        [DataMember(Name = "internalOrderId", EmitDefaultValue = false)]
        public string InternalOrderId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAmount
        /// </summary>
        [DataMember(Name= "paymentAmount", EmitDefaultValue=false)]
        public Money PaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets CustomerEmail
        /// </summary>
        [DataMember(Name = "customerEmail", EmitDefaultValue = false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNo
        /// </summary>
        [DataMember(Name = "phoneNo", EmitDefaultValue = false)]
        public string PhoneNo { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<OrderItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public Discount Discount { get; set; }

        /// <summary>
        /// Gets or Sets Shipping Details;
        /// </summary>
        [DataMember(Name = "shipping", EmitDefaultValue = false)]
        public OrderShipping Shipping { get; set; }

        /// <summary>
        /// Gets or Sets Billing Details
        /// </summary>
        [DataMember(Name = "billing", EmitDefaultValue = false)]
        public OrderBilling Billing { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        Metadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrderRequest {\n");
            sb.Append("  InternalOrderId: ").Append(InternalOrderId).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  PhoneNo: ").Append(PhoneNo).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateOrderRequest);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrderRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.InternalOrderId == other.InternalOrderId ||
                    this.InternalOrderId != null &&
                    this.InternalOrderId.Equals(other.InternalOrderId)
                ) &&
                (
                    this.PaymentAmount == other.PaymentAmount ||
                    this.PaymentAmount.Equals(other.PaymentAmount)
                ) &&
                (
                    this.CustomerEmail == other.CustomerEmail ||
                    this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(other.CustomerEmail)
                ) &&
                (
                    this.PhoneNo == other.PhoneNo ||
                    this.PhoneNo != null &&
                    this.PhoneNo.Equals(other.PhoneNo)
                ) &&
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) &&
                (
                    this.Items == other.Items ||
                    this.Items.Equals(other.Items)
                ) &&
                (
                    this.Discount == other.Discount ||
                    this.Discount.Equals(other.Discount)
                ) &&
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping.Equals(other.Shipping)
                ) &&
                (
                    this.Billing == other.Billing ||
                    this.Billing.Equals(other.Billing)
                ) &&
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata.Equals(other.Metadata)
                ) && 
                (
                    this.OrderType == other.OrderType ||
                    this.OrderType != null &&
                    this.OrderType.Equals(other.OrderType)
                );
        }
        

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InternalOrderId != null)
                    hash = hash * 59 + this.InternalOrderId.GetHashCode();
                if (this.PaymentAmount != null)
                    hash = hash * 59 + this.PaymentAmount.GetHashCode();
                if (this.CustomerEmail != null)
                    hash = hash * 59 + this.CustomerEmail.GetHashCode();
                if (this.PhoneNo != null)
                    hash = hash * 59 + this.PhoneNo.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.Discount != null)
                    hash = hash * 59 + this.Discount.GetHashCode();
                if (this.Shipping != null)
                    hash = hash * 59 + this.Shipping.GetHashCode();
                if (this.Billing != null)
                    hash = hash * 59 + this.Billing.GetHashCode();
                if (this.Metadata != null)
                    hash = hash * 59 + this.Metadata.GetHashCode();
                if (this.OrderType != null)
                    hash = hash * 59 + this.OrderType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
