/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// The Money object
    /// </summary>
    [DataContract]
    public partial class PaymentTypeAmounts :  IEquatable<PaymentTypeAmounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Authentication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentTypeAmounts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Authentication" /> class.
        /// </summary>
        /// <param name="Amount">The amount is a string representation of a decimal number, rounded to 2 decimal places (required).</param>
        /// <param name="Currency">The currency in ISO 4217 format. (required).</param>
        public PaymentTypeAmounts(string CheckoutPayType = default(string), Int64? Amount = default(Int64?) )
        {
            // to ensure "Currency" is required (not null)
            if (CheckoutPayType == null)
            {
                throw new InvalidDataException("Currency is a required property for Authentication and cannot be null");
            }

            this.CheckoutPayType = CheckoutPayType;
            this.Amount = Amount;
        }

        /// <summary>
        /// Gets or Sets CheckoutPayType
        /// </summary>
        [DataMember(Name = "checkoutPayType", EmitDefaultValue = false)]
        public string CheckoutPayType { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name= "amount", EmitDefaultValue=false)]
        public Int64? Amount { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Money {\n");
            sb.Append("  CheckoutPayType: ").Append(CheckoutPayType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Money);
        }

        /// <summary>
        /// Returns true if AccessToken instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentTypeAmounts other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.CheckoutPayType == other.CheckoutPayType ||
                    this.CheckoutPayType.Equals(other.CheckoutPayType)
                ) &&
                (
                    this.Amount == other.Amount ||
                    this.Amount.Equals(other.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)

                if (this.CheckoutPayType != null)
                    hash = hash * 59 + this.CheckoutPayType.GetHashCode();

                hash = hash * 59 + this.Amount.GetHashCode();

                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
