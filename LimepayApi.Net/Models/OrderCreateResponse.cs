/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class OrderCreateResponse :  IEquatable<OrderCreateResponse>, IValidatableObject
    {

        [JsonConstructorAttribute]
        protected OrderCreateResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrder" /> class.
        /// </summary>
        /// <param name="MerchantOrderId">MerchantOrderId</param>
        /// <param name="MerchantId">MerchantId.</param>
        /// <param name="MarketplaceId">MarketplaceId</param>
        /// <param name="InternalOrderId">InternalOrderId</param>
        /// <param name="Amount">Amount</param>
        /// <param name="Currency">Currency</param>
        /// <param name="PaymentTypeAmounts">PaymentTypeAmounts</param>
        /// <param name="AmountPaid">MerchantOrderId</param>
        /// <param name="CustomerEmail">CustomerEmail</param>
        /// <param name="PhoneNo">PhoneNo</param>
        /// <param name="Type">Type</param>
        /// <param name="Description">Description</param>
        /// <param name="Items">Items</param>
        /// <param name="TaxIncluded">TaxIncluded</param>
        /// <param name="TaxIncludedAmountOverride">TaxIncludedAmountOverride</param>
        /// <param name="Discount">Discount/param>
        /// <param name="Shipping">Shipping</param>
        /// <param name="Billing">Billing</param>
        /// <param name="Metadata">Metadata</param>
        /// <param name="Status">Status</param>
        /// <param name="Request3DSOnPayment">Request3DSOnPayment</param>
        /// <param name="EmailCustomerReceipt">EmailCustomerReceipt</param>
        /// <param name="CreatedAt">CreatedAt</param>
        /// <param name="UpdatedAt">UpdatedAt</param>
        public OrderCreateResponse(string MerchantOrderId = default(string),
            string MerchantId = default(string),
            string MarketplaceId = default(string),
            string InternalOrderId = default(string),
            Int64? Amount = default(Int64?),
            string Currency = default(string),
            List<PaymentTypeAmounts> PaymentTypeAmounts = default(List<PaymentTypeAmounts>),
            Int64 AmountPaid = default(Int64),
            string CustomerEmail = default(string),
            string PhoneNo = default(string),
            string Type = default(string),
            string Description = default(string),
            List<OrderItem> Items = default(List<OrderItem>),
            bool? TaxIncluded = default(bool?),
            Int64? TaxIncludedAmountOverride = default(Int64?),
            Discount Discount = default(Discount),
            OrderShipping Shipping = default(OrderShipping),
            OrderBilling Billing = default(OrderBilling),
            Metadata Metadata = default(Metadata),
            string Status = default(string),
            bool? Request3DSOnPayment = default(bool?),
            bool? EmailCustomerReceipt = default(bool?),
            string CreatedAt = default(string),
            string UpdatedAt = default(string))
        {
            // to ensure "MerchantOrderId" is required (not null)
            if (MerchantOrderId == null)
            {
                throw new InvalidDataException("MerchantOrderId is a required property for Order and cannot be null");
            }

            // to ensure "MerchantId" is required (not null)
            if (MerchantId == null)
            {
                throw new InvalidDataException("MerchantId is a required property for Order and cannot be null");
            }

            // to ensure "MarketplaceId" is required (not null)
            if (MarketplaceId == null)
            {
                throw new InvalidDataException("MarketplaceId is a required property for Charge and cannot be null");
            }

            this.MerchantOrderId = MerchantOrderId;
            this.MerchantId = MerchantId;
            this.MarketplaceId = MarketplaceId;
            this.InternalOrderId = InternalOrderId;
            this.Amount = Amount;
            this.Currency = Currency;
            this.PaymentTypeAmounts = PaymentTypeAmounts;
            this.AmountPaid = AmountPaid;
            this.CustomerEmail = CustomerEmail;
            this.PhoneNo = PhoneNo;
            this.Type = Type;
            this.Description = Description;
            this.Items = Items;
            this.TaxIncluded = TaxIncluded;
            this.TaxIncludedAmountOverride = TaxIncludedAmountOverride;
            this.Discount = Discount;
            this.Shipping = Shipping;
            this.Billing = Billing;
            this.Metadata = Metadata;
            this.Status = Status;
            this.Request3DSOnPayment = Request3DSOnPayment;
            this.EmailCustomerReceipt = EmailCustomerReceipt;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }

        /// <summary>
        /// Gets or Sets MerchantOrderId
        /// </summary>
        [DataMember(Name="merchantOrderId", EmitDefaultValue=false)]
        public string MerchantOrderId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name = "merchantId", EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [DataMember(Name= "marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets InternalOrderId;
        /// </summary>
        [DataMember(Name = "internalOrderId", EmitDefaultValue = false)]
        public string InternalOrderId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public Int64? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name= "currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTypeAmounts
        /// </summary>
        [DataMember(Name= "paymentTypeAmounts", EmitDefaultValue=false)]
        public List<PaymentTypeAmounts> PaymentTypeAmounts { get; set; }

        /// <summary>
        /// Gets or Sets AmountPaid
        /// </summary>
        [DataMember(Name= "amountPaid", EmitDefaultValue=false)]
        public Int64? AmountPaid { get; set; }

        /// <summary>
        /// Gets or Sets CustomerEmail
        /// </summary>
        [DataMember(Name = "customerEmail", EmitDefaultValue = false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNo
        /// </summary>
        [DataMember(Name = "phoneNo", EmitDefaultValue = false)]
        public string PhoneNo { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<OrderItem> Items { get; set; }

        /// <summary>
        /// Gets or Sets TaxIncluded
        /// </summary>
        [DataMember(Name = "taxIncluded", EmitDefaultValue = false)]
        public bool? TaxIncluded { get; set; }

        /// <summary>
        /// Gets or Sets TaxIncludedAmountOverride
        /// </summary>
        [DataMember(Name = "taxIncludedAmountOverride", EmitDefaultValue = false)]
        public Int64? TaxIncludedAmountOverride { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public Discount Discount { get; set; }

        /// <summary>
        /// Gets or Sets Shipping Details;
        /// </summary>
        [DataMember(Name = "shipping", EmitDefaultValue = false)]
        public OrderShipping Shipping { get; set; }

        /// <summary>
        /// Gets or Sets Billing Details
        /// </summary>
        [DataMember(Name = "billing", EmitDefaultValue = false)]
        public OrderBilling Billing { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        Metadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }
        
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "request3DSOnPayment", EmitDefaultValue = false)]
        public bool? Request3DSOnPayment { get; set; }
        
        /// <summary>
        /// Gets or Sets EmailCustomerReceipt
        /// </summary>
        [DataMember(Name = "EmailCustomerReceipt", EmitDefaultValue = false)]
        public bool? EmailCustomerReceipt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderCreateResponse {\n");
            sb.Append("  MerchantOrderId: ").Append(MerchantOrderId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  InternalOrderId: ").Append(InternalOrderId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PaymentTypeAmounts: ").Append(PaymentTypeAmounts).Append("\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  PhoneNo: ").Append(PhoneNo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  TaxIncluded: ").Append(TaxIncluded).Append("\n");
            sb.Append("  TaxIncludedAmountOverride: ").Append(TaxIncludedAmountOverride).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Request3DSOnPayment: ").Append(Request3DSOnPayment).Append("\n");
            sb.Append("  EmailCustomerReceipt: ").Append(EmailCustomerReceipt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderCreateResponse);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCreateResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.MerchantOrderId == other.MerchantOrderId ||
                    this.MerchantOrderId != null &&
                    this.MerchantOrderId.Equals(other.MerchantOrderId)
                ) &&
                (
                    this.MerchantId == other.MerchantId ||
                    this.MerchantId != null &&
                    this.MerchantId.Equals(other.MerchantId)
                ) &&
                (
                    this.MarketplaceId == other.MarketplaceId ||
                    this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(other.MarketplaceId)
                ) &&
                (
                    this.InternalOrderId == other.InternalOrderId ||
                    this.InternalOrderId != null &&
                    this.InternalOrderId.Equals(other.InternalOrderId)
                ) &&
                (
                    this.Amount == other.Amount ||
                    this.Amount.Equals(other.Amount)
                ) &&
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) &&
                (
                    this.PaymentTypeAmounts == other.PaymentTypeAmounts ||
                    this.PaymentTypeAmounts.Equals(other.PaymentTypeAmounts)
                ) &&
                (
                    this.AmountPaid == other.AmountPaid ||
                    this.AmountPaid.Equals(other.AmountPaid)
                ) && 
                (
                    this.CustomerEmail == other.CustomerEmail ||
                    this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(other.CustomerEmail)
                ) &&
                (
                    this.PhoneNo == other.PhoneNo ||
                    this.PhoneNo != null &&
                    this.PhoneNo.Equals(other.PhoneNo)
                ) &&
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) &&
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) &&
                (
                    this.Items == other.Items ||
                    this.Items.Equals(other.Items)
                ) &&
                (
                    this.TaxIncluded == other.TaxIncluded ||
                    this.TaxIncluded.Equals(other.TaxIncluded)
                ) &&
                (
                    this.TaxIncludedAmountOverride == other.TaxIncludedAmountOverride ||
                    this.TaxIncludedAmountOverride.Equals(other.TaxIncludedAmountOverride)
                ) &&
                (
                    this.Discount == other.Discount ||
                    this.Discount.Equals(other.Discount)
                ) &&
                (
                    this.Shipping == other.Shipping ||
                    this.Shipping.Equals(other.Shipping)
                ) &&
                (
                    this.Billing == other.Billing ||
                    this.Billing.Equals(other.Billing)
                ) &&
                (
                    this.Metadata == other.Metadata ||
                    this.Metadata.Equals(other.Metadata)
                ) &&
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) &&
                (
                    this.Request3DSOnPayment == other.Request3DSOnPayment ||
                    this.Request3DSOnPayment.Equals(other.Request3DSOnPayment)
                ) &&
                (
                    this.EmailCustomerReceipt == other.EmailCustomerReceipt ||
                    this.EmailCustomerReceipt.Equals(other.EmailCustomerReceipt)
                ) &&
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }
        

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MerchantOrderId != null)
                    hash = hash * 59 + this.MerchantOrderId.GetHashCode();
                if (this.MerchantOrderId != null)
                    hash = hash * 59 + this.MerchantOrderId.GetHashCode();
                if (this.MerchantId != null)
                    hash = hash * 59 + this.MerchantId.GetHashCode();
                if (this.MarketplaceId != null)
                    hash = hash * 59 + this.MarketplaceId.GetHashCode();
                if (this.InternalOrderId != null)
                    hash = hash * 59 + this.InternalOrderId.GetHashCode();
                hash = hash * 59 + this.Amount.GetHashCode();
                hash = hash * 59 + this.Currency.GetHashCode();
                hash = hash * 59 + this.PaymentTypeAmounts.GetHashCode();
                hash = hash * 59 + this.AmountPaid.GetHashCode();
                if (this.CustomerEmail != null)
                    hash = hash * 59 + this.CustomerEmail.GetHashCode();
                if (this.PhoneNo != null)
                    hash = hash * 59 + this.PhoneNo.GetHashCode();
                hash = hash * 59 + this.Type.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                hash = hash * 59 + this.Items.GetHashCode();
                hash = hash * 59 + this.TaxIncluded.GetHashCode();
                hash = hash * 59 + this.TaxIncludedAmountOverride.GetHashCode();
                hash = hash * 59 + this.Discount.GetHashCode();
                hash = hash * 59 + this.Shipping.GetHashCode();
                hash = hash * 59 + this.Billing.GetHashCode();
                hash = hash * 59 + this.Metadata.GetHashCode();
                hash = hash * 59 + this.Status.GetHashCode();
                hash = hash * 59 + this.Request3DSOnPayment.GetHashCode();
                hash = hash * 59 + this.EmailCustomerReceipt.GetHashCode();
                hash = hash * 59 + this.CreatedAt.GetHashCode();
                hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
