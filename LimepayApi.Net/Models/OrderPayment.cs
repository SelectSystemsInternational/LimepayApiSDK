/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class OrderPayment :  IEquatable<OrderPayment>, IValidatableObject
    {

        [JsonConstructorAttribute]
        protected OrderPayment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrder" /> class.
        /// </summary>
        /// <param name="PaymentToken">PaymentToken (required).</param>
        /// <param name="ExpiryDateTime">ExpiryDateTime (required).</param>
        /// <param name="RedirectUrl">RedirectUrl.</param>
        /// <param name="OrderId">OrderId.</param>
        /// <param name="Warnings">Warnings.</param>
        /// <param name="Errors">Errors (required).</param>
        /// <param name="CustomerPairingPaymentTokenActive">CustomerPairingPaymentTokenActive.</param>
        public OrderPayment(string PaymentToken = default(string),
            bool Request3DS = default(bool),
            string ReturnURL = default(string),
            bool AuthoriseOnly = default(bool),
            bool OffSession = default(bool),
            CardStatement CardStatement = default(CardStatement),
            PaymentActionRequired PaymentActionRequired = default(PaymentActionRequired))
        {
            // to ensure "PaymentToken" is required (not null)
            if (PaymentToken == null)
            {
                throw new InvalidDataException("PaymentToken is a required property for Order and cannot be null");
            }

            this.PaymentToken = PaymentToken;
            this.Request3DS = Request3DS;
            this.ReturnURL = ReturnURL;
            this.AuthoriseOnly = AuthoriseOnly;
            this.OffSession = OffSession;
            this.CardStatement = CardStatement;
            this.PaymentActionRequired = PaymentActionRequired;
        }

        /// <summary>
        /// Gets or Sets PaymentToken
        /// </summary>
        [DataMember(Name= "paymentToken", EmitDefaultValue=false)]
        public string PaymentToken { get; set; }

        /// <summary>
        /// Gets or Sets Request3DS
        /// </summary>
        [DataMember(Name = "request3DS", EmitDefaultValue = false)]
        public bool Request3DS { get; set; }

        /// <summary>
        /// Gets or Sets ReturnURL
        /// </summary>
        [DataMember(Name= "returnURL", EmitDefaultValue=false)]
        public string ReturnURL { get; set; }

        /// <summary>
        /// Gets or Sets AuthoriseOnly;
        /// </summary>
        [DataMember(Name = "authoriseOnly", EmitDefaultValue = false)]
        public bool AuthoriseOnly { get; set; }

        /// <summary>
        /// Gets or Sets OffSession
        /// </summary>
        [DataMember(Name = "offSession", EmitDefaultValue = false)]
        public bool OffSession { get; set; }

        /// <summary>
        /// Gets or Sets CardStatement
        /// </summary>
        [DataMember(Name= "cardStatement", EmitDefaultValue=false)]
        public CardStatement CardStatement { get; set; }

        /// <summary>
        /// Gets or Sets PaymentActionRequired
        /// </summary>
        [DataMember(Name= "paymentActionRequired", EmitDefaultValue=false)]
        public PaymentActionRequired PaymentActionRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderPayment {\n");
            sb.Append("  PaymentToken: ").Append(PaymentToken).Append("\n");
            sb.Append("  Request3DS: ").Append(Request3DS).Append("\n");
            sb.Append("  ReturnURL: ").Append(ReturnURL).Append("\n");
            sb.Append("  AuthoriseOnly: ").Append(AuthoriseOnly).Append("\n");
            sb.Append("  OffSession: ").Append(OffSession).Append("\n");
            sb.Append("  CardStatement: ").Append(CardStatement).Append("\n");
            sb.Append("  PaymentActionRequired: ").Append(PaymentActionRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderPayment);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPayment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.PaymentToken == other.PaymentToken ||
                    this.PaymentToken != null &&
                    this.PaymentToken.Equals(other.PaymentToken)
                ) &&
                (
                    this.Request3DS == other.Request3DS ||
                    this.Request3DS.Equals(other.Request3DS)
                ) &&
                (
                    this.ReturnURL == other.ReturnURL ||
                    this.ReturnURL != null &&
                    this.ReturnURL.Equals(other.ReturnURL)
                ) &&
                (
                    this.AuthoriseOnly == other.AuthoriseOnly ||
                    this.AuthoriseOnly.Equals(other.AuthoriseOnly)
                ) &&
                (
                    this.OffSession == other.OffSession ||
                    this.OffSession.Equals(other.OffSession)
                ) &&
                (
                    this.CardStatement == other.CardStatement ||
                    this.CardStatement.Equals(other.CardStatement)
                ) &&
                (
                    this.PaymentActionRequired == other.PaymentActionRequired ||
                    this.PaymentActionRequired.Equals(other.PaymentActionRequired)
                );
        }
        

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaymentToken != null)
                    hash = hash * 59 + this.PaymentToken.GetHashCode();
                hash = hash * 59 + this.Request3DS.GetHashCode();
                if (this.ReturnURL != null)
                    hash = hash * 59 + this.ReturnURL.GetHashCode();
                hash = hash * 59 + this.AuthoriseOnly.GetHashCode();
                hash = hash * 59 + this.OffSession.GetHashCode();
                hash = hash * 59 + this.CardStatement.GetHashCode();
                hash = hash * 59 + this.PaymentActionRequired.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
