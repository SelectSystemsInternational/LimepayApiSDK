/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{

    /// <summary>
    /// The TransactionPayType object
    /// </summary>
    [DataContract]
    public partial class TransactionPayType :  IEquatable<TransactionPayType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionPayType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionPayType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Authentication" /> class.
        /// </summary>
        /// <param name="Amount">The amount is a string representation of a decimal number, rounded to 2 decimal places (required).</param>
        /// <param name="Currency">The currency in ISO 4217 format. (required).</param>
        public TransactionPayType(string BankTransferId = default(string),
            string PayCardId = default(string),
            string PayDeferralId = default(string),
            string PayPlanId = default(string))
        {
            this.BankTransferId = BankTransferId;
            this.PayCardId = PayCardId;
            this.PayDeferralId = PayDeferralId;
            this.PayPlanId = PayPlanId;
        }

        /// <summary>
        /// Gets or Sets BankTransferId
        /// </summary>
        [DataMember(Name= "bankTransferId", EmitDefaultValue=false)]
        public string BankTransferId { get; set; }

        /// <summary>
        /// Gets or Sets PayCardId
        /// </summary>
        [DataMember(Name = "payCardId", EmitDefaultValue = false)]
        public string PayCardId { get; set; }

        /// <summary>
        /// Gets or Sets PayDeferralId
        /// </summary>
        [DataMember(Name = "payDeferralId", EmitDefaultValue = false)]
        public string PayDeferralId { get; set; }

        /// <summary>
        /// Gets or Sets PayPlanId
        /// </summary>
        [DataMember(Name = "PayPlanId", EmitDefaultValue = false)]
        public string PayPlanId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionPayType {\n");
            sb.Append("  BankTransferId: ").Append(BankTransferId).Append("\n");
            sb.Append("  PayCardId: ").Append(PayCardId).Append("\n");
            sb.Append("  PayDeferralId: ").Append(PayDeferralId).Append("\n");
            sb.Append("  PayPlanId: ").Append(PayPlanId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TransactionPayType);
        }

        /// <summary>
        /// Returns true if AccessToken instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionPayType other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BankTransferId == other.BankTransferId ||
                    this.BankTransferId != null &&
                    this.BankTransferId.Equals(other.BankTransferId)
                ) &&
                (
                    this.PayCardId == other.PayCardId ||
                    this.PayCardId != null &&
                    this.PayCardId.Equals(other.PayCardId)
                ) &&
                (
                    this.PayDeferralId == other.PayDeferralId ||
                    this.PayDeferralId != null &&
                    this.PayDeferralId.Equals(other.PayDeferralId)
                ) &&
                (
                    this.PayPlanId == other.PayPlanId ||
                    this.PayPlanId != null &&
                    this.PayPlanId.Equals(other.PayPlanId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)

                if (this.BankTransferId != null)
                    hash = hash * 59 + this.BankTransferId.GetHashCode();
                if (this.PayCardId != null)
                    hash = hash * 59 + this.PayCardId.GetHashCode();
                if (this.PayDeferralId != null)
                    hash = hash * 59 + this.PayDeferralId.GetHashCode(); 
                if (this.PayPlanId != null)
                    hash = hash * 59 + this.PayPlanId.GetHashCode();

                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
