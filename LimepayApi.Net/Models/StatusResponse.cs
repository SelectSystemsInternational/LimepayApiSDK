/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// ErrorResponse
    /// </summary>
    [DataContract]
    public partial class StatusResponse :  IEquatable<StatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusResponse" /> class.
        /// </summary>
        /// <param name="Error">Error.</param>
        public StatusResponse(int StatusCode = default(int), 
            Object ErrorCode = default(Object),
            string Message = default(string),
            string Tracer = default(string), 
            string Detail = default(string),                                            
            string ErrorTypeDescription = default(string))
        {
            this.StatusCode = StatusCode;
            this.ErrorCode = ErrorCode;
            this.Message = Message;
            this.Tracer = Tracer;
            this.Detail = Detail;
            this.ErrorTypeDescription = ErrorTypeDescription;
        }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name= "statusCode", EmitDefaultValue=false)]
        int StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        Object ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        string Message { get; set; }
        /// <summary>
        /// Gets or Sets Tracer
        /// </summary>
        [DataMember(Name = "tracer", EmitDefaultValue = false)]
        string Tracer { get; set; }
        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        string Detail { get; set; }
        /// <summary>
        /// Gets or Sets ErrorTypeDescription
        /// </summary>
        [DataMember(Name = "errorTypeDescription", EmitDefaultValue = false)]
        string ErrorTypeDescription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  StatusCode").Append(StatusCode).Append("\n");
            sb.Append("  ErrorCode").Append(ErrorCode).Append("\n");
            sb.Append("  Message").Append(Message).Append("\n");
            sb.Append("  Tracer").Append(Tracer).Append("\n");
            sb.Append("  Detail").Append(Detail).Append("\n");
            sb.Append("  ErrorTypeDescription").Append(ErrorTypeDescription).Append("\n");

            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StatusResponse);
        }

        /// <summary>
        /// Returns true if ErrorResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode.Equals(other.StatusCode)
                ) &&
                (
                    this.ErrorCode == other.ErrorCode ||
                    this.ErrorCode != null &&
                    this.ErrorCode.Equals(other.ErrorCode)
                ) &&
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) &&
                (
                    this.Tracer == other.Tracer ||
                    this.Tracer != null &&
                    this.Tracer.Equals(other.Tracer)
                ) &&
                (
                    this.Detail == other.Detail ||
                    this.Detail != null &&
                    this.Detail.Equals(other.Detail)
                ) &&
                (
                    this.ErrorTypeDescription == other.ErrorTypeDescription ||
                    this.ErrorTypeDescription != null &&
                    this.ErrorTypeDescription.Equals(other.ErrorTypeDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                
                hash = hash * 59 + this.StatusCode.GetHashCode();
                if (this.ErrorCode != null)
                    hash = hash * 59 + this.ErrorCode.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Tracer != null)
                    hash = hash * 59 + this.Tracer.GetHashCode();
                if (this.Detail != null)
                    hash = hash * 59 + this.Detail.GetHashCode();
                if (this.ErrorTypeDescription != null)
                    hash = hash * 59 + this.ErrorTypeDescription.GetHashCode();

                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
