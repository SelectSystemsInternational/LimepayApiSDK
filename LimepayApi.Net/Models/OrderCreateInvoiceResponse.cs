/* 
 * Limepay API
 *
 * Initial build 2022-07-23
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://selectsystems.com.au
 */

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace LimepayApi.Net.Models
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class OrderCreateInvoiceResponse :  IEquatable<OrderCreateInvoiceResponse>, IValidatableObject
    {

        [JsonConstructorAttribute]
        protected OrderCreateInvoiceResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutOrder" /> class.
        /// </summary>
        /// <param name="MerchantOrder">MerchantOrder</param>
        /// <param name="Request3DSOnPayment">Request3DSOnPayment</param>
        /// <param name="EmailCustomerReceipt">EmailCustomerReceipt</param>
        public OrderCreateInvoiceResponse(OrderCreateResponse MerchantOrder = default(OrderCreateResponse),
            string Token = default(string),
            string MagicLink = default(string))
        {
            this.MerchantOrder = MerchantOrder;
            this.Token = Token;
            this.MagicLink = MagicLink;
        }

        /// <summary>
        /// Gets or Sets MerchantOrderId
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public OrderCreateResponse MerchantOrder { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [DataMember(Name= "magicLink", EmitDefaultValue=false)]
        public string MagicLink { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderCreateResponse {\n");
            sb.Append("  MerchantOrder: ").Append(MerchantOrder).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  MagicLink: ").Append(MagicLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderCreateResponse);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCreateInvoiceResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return
                (
                    this.MerchantOrder == other.MerchantOrder ||
                    this.MerchantOrder.Equals(other.MerchantOrder)
                ) &&
                (
                    this.Token == other.Token ||
                    this.Token != null &&
                    this.Token.Equals(other.Token)
                ) &&
                (
                    this.MagicLink == other.MagicLink ||
                    this.MagicLink != null &&
                    this.MagicLink.Equals(other.MagicLink)
                );
        }
        

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                hash = hash * 59 + this.MerchantOrder.GetHashCode();
                if (this.Token != null)
                    hash = hash * 59 + this.Token.GetHashCode();
                if (this.MagicLink != null)
                    hash = hash * 59 + this.MagicLink.GetHashCode();

                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
